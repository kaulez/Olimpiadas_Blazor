@using Olimpiadas.Shared.ViewModels;
﻿<div class="modal fade show" id="myModal" style="display:block; background-color: rgba(10,10,10,.8);" aria-modal="true" role="dialog">
    <div class="modal-dialog">

        <EditForm Model="@campus">
            <div class="modal-content">
            <div class="modal-header">
                    <h5 class="modal-title font-size-headers">Registro de Sede</h5>
                <button type="button" class="close" @onclick="CloseCampusModal">
                    <span aria-hidden="true">&times;</span>
                </button>
            </div>
            <div class="modal-body">
                <form>
                    <div class="form-group">
                            <label class="font-labels-input" for="nombre">Nombre:</label>
                      <InputText type="text" class="form-control" id="nombre" @bind-Value="campus.Name" />
                    </div>
                    <div class="form-group">
                            <label class="font-labels-input" for="presupuesto">Presupuesto:</label>
                        <InputNumber type="number" class="form-control" id="presupuesto" @bind-Value="campus.ApproximateEstimation" />
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseCampusModal">Cerrar</button>
                <button type="button" class="btn btn-primary" @onclick="CreateCampusAndCloseModal">Registrar</button>
            </div>
        </div>
       </EditForm>
    </div>
</div>
@code {

    [Parameter]
    public EventCallback<CampusViewModel> OnCreate { get; set; }

    public CampusViewModel campus = new CampusViewModel();

    public Task CreateCampusAndCloseModal()
    {
        return OnCreate.InvokeAsync(campus);
    }
    public Task CloseCampusModal()
    {
        return OnCreate.InvokeAsync(campus);
    }
}
